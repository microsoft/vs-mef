# Build definition for our PRs
trigger: none

variables:
  BuildConfiguration: Release
  NUGET_PACKAGES: $(Agent.TempDirectory)/.nuget/packages/
  MicroBuildPool: 'VSEngSS-MicroBuild2022-1ES'

parameters:
- name: ShouldSkipOptimize # Uncomment this and references to it below when setting EnableOptProf to true in build.yml.
  displayName: Skip OptProf optimization
  type: boolean
  default: false
- name: EnableMacOSBuild
  displayName: Build on macOS
  type: boolean
  default: false
- name: BaselineBranch
  displayName: Baseline Branch
  type: string
  default: "main"
- name: PostPRComments
  displayName: Post PR Comments
  type: boolean
  default: false

jobs:
  - job: RunBenchmarks
    timeoutInMinutes: 120
    pool: $(MicroBuildPool)
    steps:
    - template: install-dependencies.yml
    - template: dotnet.yml
      parameters:
        Is1ESPT: true
        RunTests: false
        IsOptProf: true

    - task: PowerShell@2
      displayName: 'Run Benchmarks for $(Build.SourceBranch)'
      inputs:
        targetType: 'inline'
        script: |
          bin\Tests\Release\net8.0\Microsoft.VisualStudio.Composition.BenchmarkTests.exe
        workingDirectory: '$(Build.Repository.LocalPath)'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish new benchmarks'
      inputs:
        path: $(Build.Repository.LocalPath)\BenchmarkDotNet.Artifacts
        artifact: newBenchmarks

  - job: RunBenchmarksBaseline
    timeoutInMinutes: 120
    pool: $(MicroBuildPool)
    steps:
    - task: PowerShell@2
      displayName: 'Switch branch to ${{ parameters.BaselineBranch }}'
      inputs:
        targetType: 'inline'
        script: |
          git checkout ${{ parameters.BaselineBranch }}
        workingDirectory: '$(Build.Repository.LocalPath)'
    - template: install-dependencies.yml
    - template: dotnet.yml
      parameters:
        Is1ESPT: true
        RunTests: false
        IsOptProf: true

    - task: PowerShell@2
      displayName: 'Run Benchmarks for ${{ parameters.BaselineBranch }}'
      inputs:
        targetType: 'inline'
        script: |
          bin\Tests\Release\net8.0\Microsoft.VisualStudio.Composition.BenchmarkTests.exe
        workingDirectory: '$(Build.Repository.LocalPath)'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish baseline benchmarks'
      inputs:
        path: $(Build.Repository.LocalPath)\BenchmarkDotNet.Artifacts
        artifact: baselineBenchmarks

  - job: CompareBenchmarks
    pool: $(MicroBuildPool)
    dependsOn: [
        "RunBenchmarks",
        "RunBenchmarksBaseline"
      ]
    condition: and(or(eq(dependencies.RunBenchmarks.result, 'Succeeded'), eq(dependencies.RunBenchmarks.result, 'SucceededWithIssues')), or(eq(dependencies.RunBenchmarksBaseline.result, 'Succeeded'), eq(dependencies.RunBenchmarksBaseline.result, 'SucceededWithIssues')))
    steps:
    - task: PowerShell@2
      displayName: 'Create benchmark directories'
      inputs:
        targetType: 'inline'
        script: |
          mkdir newBenchmarks
          cd newBenchmarks
        workingDirectory: '$(Build.Repository.LocalPath)'
# Download benchmarks
    - task: DownloadPipelineArtifact@2
      displayName: 'Download new benchmarks'
      inputs:
        buildType: 'current'
        artifactName: 'newBenchmarks'
        targetPath: '$(Build.Repository.LocalPath)\newBenchmarks'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download baseline benchmarks'
      inputs:
        buildType: 'current'
        artifactName: 'baselineBenchmarks'
        targetPath: '$(Build.Repository.LocalPath)\baselineBenchmarks'

    # Benchmark Compare placeholder
