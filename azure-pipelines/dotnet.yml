steps:
# We use VSBuild instead of "dotnet build" on Windows where the MicroBuild IBCMerge task has to run.
- task: VSBuild@1
  displayName: Build Visual Studio solution
  inputs:
    msbuildArgs: /t:build,pack /m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
    platform: Any CPU
    configuration: $(BuildConfiguration)
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- script: dotnet build --no-restore -c $(BuildConfiguration) /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: dotnet build
  condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))

- script: dotnet pack --no-build -c $(BuildConfiguration) /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack.binlog"
  displayName: dotnet pack
  condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))

- task: DotNetCoreCLI@2
  displayName: test engine (net472)
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f net472 test/Microsoft.VisualStudio.Composition.Tests --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net472.binlog" --diag "$(Build.ArtifactStagingDirectory)/test_logs/net472.txt"
    testRunTitle: net472-$(Agent.JobName)
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: test engine (netcoreapp3.1)
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f netcoreapp3.1 test/Microsoft.VisualStudio.Composition.Tests --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_netcoreapp3.1.binlog" --diag "$(Build.ArtifactStagingDirectory)/test_logs/netcoreapp3.1.txt"
    testRunTitle: netcoreapp3.1-$(Agent.JobName)
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: test analyzers
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f netcoreapp3.1 test/Microsoft.VisualStudio.Composition.Analyzers.Tests --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_analyzers.binlog" --diag "$(Build.ArtifactStagingDirectory)/test_logs/analyzers.txt"
    testRunTitle: netcoreapp3.1-$(Agent.JobName)
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: test vsmefx
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f net6.0 test/VS.Mefx.Tests --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_vsmefx.binlog" --diag "$(Build.ArtifactStagingDirectory)/test_logs/vsmefx.txt"
    testRunTitle: net6.0-$(Agent.JobName)
  condition: succeededOrFailed()

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)"
  failOnStderr: true
  displayName: Publish artifacts
  condition: succeededOrFailed()

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols-$(Agent.JobName)
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish symbols to symbol server
  condition: eq(variables['Agent.OS'], 'Windows_NT') # Execute on failed test runs too. Windows-only till https://github.com/microsoft/azure-pipelines-tasks/issues/13821 is fixed.

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/test_symbols-$(Agent.JobName)
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish test symbols to symbol server
  condition: and(failed(), eq(variables['Agent.OS'], 'Windows_NT')) # Execute on failed test runs only.

- bash: bash <(curl -s https://codecov.io/bash)
  displayName: Publish code coverage results to codecov.io
  condition: ne(variables['codecov_token'], '')
  timeoutInMinutes: 3
  continueOnError: true
